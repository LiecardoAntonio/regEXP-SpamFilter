FCC Learn Regular Expression - Buildign Spam Filter

CONTENT:
1. regex to match a string
  > const regex = /hello world/; //this will match the hello world string

2. regex flags
  a. 'i' flags :  the i flag can be used to make the expression ignore case
  > ex: 
  const regex = /hello/i //
  > the above flags make the regex will match hello, HELLO, and Hello for the expression /hello/

  b. '|' flags: The alternate sequence | can be used to match either the text on the left or the text on the right of the |. 
  > ex:
  const regex = /yes|no/
  > will match either yes or no.

  c. regex character class
  > A character class is defined by square brackets, and matches any character within the brackets. For example, [aeiou] matches any character in the list aeiou. You can also define a range of characters to match using a hyphen. For example, [a-z] matches any character from a to z.
  > ex:
  const dollarRegex = /[0-9] dollars/i;
  > will match a number from 0-9 followed by space and the word 'dollars'

  d. '+' quantifier
  > The + quantifier can be used to match one or more consecutive occurrences. For example, the regular expression /a+/ matches one or more consecutive a characters.
  > ex:
  const dollarRegex = /[0-9]+ dollars/i;
  > will match more than 1 digit of number

  e. regex capture group
  > A capture group is a way to define a part of the expression that should be captured and saved for later reference. You can define a capture group by wrapping a part of your expression in parentheses. For example, /h(i|ey) camper/ would match either hi camper or hey camper, and would capture i or ey in a group.

  f. '?' quantifier 
  > The ? quantifier matches zero or one occurrence of the preceding character or group. For example, the regular expression /colou?r/ matches both color and colour, because the u is optional.

  g. '\s'
  > The \s character class matches whitespace, such as spaces, tabs, and new lines.

  h. '*' quantifier
  > The * quantifier means "match the previous character 0 or more times".

  i. non capturing group
  > To create a non-capturing group in a regular expression, you can add ?: after the opening parenthesis of a group. For instance, (?:a|b) will match either a or b, but it will not capture the result.

  j. (NOTE) to see the difference between capturing & non-capturing group, check on the bottom of the script.js, there is a better explanation on what is the difference between them

3. string.match(regex);
  > Strings have a .match() method, which accepts a regular expression as an argument and determines if the string matches that expression.
  > The match() method returns an array with the matches. The match() method returns null if no match is found.

4. regex.test(string);
  > Instead of using the .match() method, you can use the .test() method of a regular expression to test if a string matches the pattern. Unlike .match(), .test() returns a boolean value indicating whether or not the string matches the pattern.

5. arr.some(() => {});
  > Arrays have a .some() method. Like the .filter() method, .some() accepts a callback function which should take an element of the array as the argument. The .some() method will return true if the callback function returns true for at least one element in the array.
  > ex:
  const arr = ["A", "b", "C"];
  arr.some(letter => letter === letter.toUpperCase());